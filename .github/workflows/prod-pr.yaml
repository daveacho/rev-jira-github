name: 'Pull Request on Prod environment'

on:
  pull_request:
    branches:
      - main
    paths:
      - 'environments/prod/**'
      - 'modules/**'

env:
  TF_LOG: INFO
  TF_INPUT: false

jobs:
  pr-infra-check-prod:
    runs-on: ubuntu-latest
    permissions:
      id-token: write # Required for OIDC to request the GitHub JWT
      issues: write        # Required to create issue comments
      pull-requests: write  # Required to interact with pull requests
      contents: read       # Required for actions/checkout

    defaults:
      run:
        shell: bash
        working-directory: environments/prod

    env:
      AWS_REGION: eu-west-2
      TF_VAR_aws_region: eu-west-2
      TF_VAR_projectName: rev
      TF_VAR_environment: prod

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.12.2"
          # terraform_wrapper: false # Disable wrapper to capture plan output

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4 # Updated to latest stable version
        env:
          AWS_REGION: eu-west-2
          AWS_ROLE_ARN: arn:aws:iam::339713055209:role/test-oidc-role

        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }} # Replace with your IAM role ARN
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActionsSession

      # Run terraform fmt -check
      - name: Terraform Format
        id: fmt
        run: terraform fmt
        continue-on-error: false # Fail if formatting is incorrect

      # Initialize Terraform
      - name: Terraform Init
        id: init
        run: terraform init

      # Run terraform validate
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      # Generate Terraform plan and capture output
      - name: Terraform Plan
        id: plan
        run:  terraform plan -out=tfplan -no-color -lock-timeout=30s > plan-output.txt
        continue-on-error: false # Allow plan to fail for PRs to show changes

      # Add a comment to pull requests with plan results
      - name: Add Plan Comment
        id: comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const planOutput = fs.readFileSync('environments/prod/plan-output.txt', 'utf8');
            const output = `#### Terraform Format and Style üñå(prod)\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è(prod)\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ(prod)\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ(prod)\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`terraform\n${planOutput}\n\`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });


#arn:aws:iam::339713055209:role/test-oidc-role